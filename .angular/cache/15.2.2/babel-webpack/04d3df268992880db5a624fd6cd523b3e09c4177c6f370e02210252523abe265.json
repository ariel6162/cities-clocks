{"ast":null,"code":"import data from '../../assets/json/data.json';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"../clock/clock.component\";\nfunction ClocksContainerComponent_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵelement(1, \"app-clock\", 2);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const clock_r1 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"clock\", clock_r1);\n  }\n}\n//clocks = data.clocks;\n// sortedClocks = [];\n// x = data.clocks.at(0);\n// i = this.x?.id;\n// timeZone: TimeZone = {city:\"\", gap:0};\nexport class ClocksContainerComponent {\n  constructor(http) {\n    this.http = http;\n  }\n  ngOnInit() {\n    // this.clocks = data.clocks;\n    this.clocks = [{\n      id: 1,\n      hour: 20,\n      minute: 14,\n      second: 8,\n      city: 'Jerusalem',\n      checked: true\n    }];\n    this.timeZones = data.timeZones;\n    setOtherClocksData(this.clocks, this.timeZones);\n  }\n}\nClocksContainerComponent.ɵfac = function ClocksContainerComponent_Factory(t) {\n  return new (t || ClocksContainerComponent)(i0.ɵɵdirectiveInject(i1.HttpClient));\n};\nClocksContainerComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: ClocksContainerComponent,\n  selectors: [[\"app-clocks-container\"]],\n  decls: 2,\n  vars: 1,\n  consts: [[1, \"clocks-container\"], [4, \"ngFor\", \"ngForOf\"], [3, \"clock\"]],\n  template: function ClocksContainerComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0);\n      i0.ɵɵtemplate(1, ClocksContainerComponent_div_1_Template, 2, 1, \"div\", 1);\n      i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngForOf\", ctx.clocks);\n    }\n  },\n  dependencies: [i2.NgForOf, i3.ClockComponent],\n  styles: [\".clocks-container[_ngcontent-%COMP%] {\\n  display: flex;\\n  flex-direction: row;\\n  align-items: center;\\n  justify-content: space-around;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvY2xvY2tzLWNvbnRhaW5lci9jbG9ja3MtY29udGFpbmVyLmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0UsYUFBQTtFQUNBLG1CQUFBO0VBQ0EsbUJBQUE7RUFDQSw2QkFBQTtBQUNGIiwic291cmNlc0NvbnRlbnQiOlsiLmNsb2Nrcy1jb250YWluZXIge1xyXG4gIGRpc3BsYXk6IGZsZXg7XHJcbiAgZmxleC1kaXJlY3Rpb246IHJvdztcclxuICBhbGlnbi1pdGVtczogY2VudGVyO1xyXG4gIGp1c3RpZnktY29udGVudDogc3BhY2UtYXJvdW5kO1xyXG59XHJcbiJdLCJzb3VyY2VSb290IjoiIn0= */\"]\n});\nfunction setOtherClocksData(clocks, timeZones) {\n  for (let i = 0; i < timeZones.length; i++) {\n    if (timeZones[i].city !== 'Jerusalem') {\n      const timeZoneGap = timeZones[i].gap;\n      const currentTime = new Date();\n      const timeInZone = new Date(currentTime.getTime() + timeZoneGap * 60 * 60 * 1000);\n      const hour = timeInZone.getUTCHours();\n      const minute = timeInZone.getUTCMinutes();\n      const second = timeInZone.getUTCSeconds();\n      const city = timeZones[i].city;\n      const newClock = {\n        id: i + 2,\n        hour,\n        minute,\n        second,\n        city\n      };\n      clocks.push(newClock);\n    }\n  }\n}","map":{"version":3,"mappings":"AAEA,OAAOA,IAAI,MAAM,6BAA6B;;;;;;;ICD5CC,2BAAkC;IAChCA,+BAAuC;IACzCA,iBAAM;;;;IADOA,eAAe;IAAfA,gCAAe;;;ADS9B;AACA;AACA;AACA;AACA;AAEA,OAAM,MAAOC,wBAAwB;EAGnCC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;EAAe;EACvCC,QAAQ;IACN;IACA,IAAI,CAACC,MAAM,GAAG,CAAC;MAAEC,EAAE,EAAE,CAAC;MAAEC,IAAI,EAAE,EAAE;MAAEC,MAAM,EAAE,EAAE;MAAEC,MAAM,EAAE,CAAC;MAAEC,IAAI,EAAE,WAAW;MAAEC,OAAO,EAAE;IAAI,CAAE,CAAC;IAE5F,IAAI,CAACC,SAAS,GAAGb,IAAI,CAACa,SAAS;IAC/BC,kBAAkB,CAAC,IAAI,CAACR,MAAM,EAAE,IAAI,CAACO,SAAS,CAAC;EACjD;;AAVWX,wBAAwB;mBAAxBA,wBAAwB;AAAA;AAAxBA,wBAAwB;QAAxBA,wBAAwB;EAAAa;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCjBrClB,8BAA8B;MAC5BA,yEAEM;MACRA,iBAAM;;;MAHmBA,eAAS;MAATA,oCAAS;;;;;;AD+BlC,SAASa,kBAAkB,CAACR,MAAmB,EAAEO,SAAqB;EACpE,KAAK,IAAIO,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGP,SAAS,CAACQ,MAAM,EAAED,CAAC,EAAE,EAAE;IACzC,IAAIP,SAAS,CAACO,CAAC,CAAC,CAACT,IAAI,KAAK,WAAW,EAAE;MACrC,MAAMW,WAAW,GAAGT,SAAS,CAACO,CAAC,CAAC,CAACG,GAAG;MACpC,MAAMC,WAAW,GAAG,IAAIC,IAAI,EAAE;MAC9B,MAAMC,UAAU,GAAG,IAAID,IAAI,CAACD,WAAW,CAACG,OAAO,EAAE,GAAIL,WAAW,GAAG,EAAE,GAAG,EAAE,GAAG,IAAK,CAAC;MACnF,MAAMd,IAAI,GAAGkB,UAAU,CAACE,WAAW,EAAE;MACrC,MAAMnB,MAAM,GAAGiB,UAAU,CAACG,aAAa,EAAE;MACzC,MAAMnB,MAAM,GAAGgB,UAAU,CAACI,aAAa,EAAE;MACzC,MAAMnB,IAAI,GAAGE,SAAS,CAACO,CAAC,CAAC,CAACT,IAAI;MAC9B,MAAMoB,QAAQ,GAAc;QAAExB,EAAE,EAAEa,CAAC,GAAG,CAAC;QAAEZ,IAAI;QAAEC,MAAM;QAAEC,MAAM;QAAEC;MAAI,CAAE;MACrEL,MAAM,CAAC0B,IAAI,CAACD,QAAQ,CAAC;;;AAG3B","names":["data","i0","ClocksContainerComponent","constructor","http","ngOnInit","clocks","id","hour","minute","second","city","checked","timeZones","setOtherClocksData","selectors","decls","vars","consts","template","i","length","timeZoneGap","gap","currentTime","Date","timeInZone","getTime","getUTCHours","getUTCMinutes","getUTCSeconds","newClock","push"],"sourceRoot":"","sources":["C:\\Users\\ariel\\Documents\\jb\\angular2023\\four-cities-clock\\src\\app\\clocks-container\\clocks-container.component.ts","C:\\Users\\ariel\\Documents\\jb\\angular2023\\four-cities-clock\\src\\app\\clocks-container\\clocks-container.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport data from '../../assets/json/data.json';\nimport { TimeZone } from '../models/timezone.model';\nimport { ClockData } from '../models/clockData.model';\n\n@Component({\n  selector: 'app-clocks-container',\n  templateUrl: './clocks-container.component.html',\n  styleUrls: ['./clocks-container.component.scss']\n})\n//clocks = data.clocks;\n// sortedClocks = [];\n// x = data.clocks.at(0);\n// i = this.x?.id;\n// timeZone: TimeZone = {city:\"\", gap:0};\n\nexport class ClocksContainerComponent implements OnInit {\n  clocks: ClockData [];\n  timeZones: TimeZone [];\n  constructor(private http: HttpClient) {}\n  ngOnInit() {\n    // this.clocks = data.clocks;\n    this.clocks = [{ id: 1, hour: 20, minute: 14, second: 8, city: 'Jerusalem', checked: true }];\n\n    this.timeZones = data.timeZones;\n    setOtherClocksData(this.clocks, this.timeZones);\n  }\n}\n\n\n\nfunction setOtherClocksData(clocks: ClockData[], timeZones: TimeZone[]) {\n  for (let i = 0; i < timeZones.length; i++) {\n    if (timeZones[i].city !== 'Jerusalem') {\n      const timeZoneGap = timeZones[i].gap;\n      const currentTime = new Date();\n      const timeInZone = new Date(currentTime.getTime() + (timeZoneGap * 60 * 60 * 1000));\n      const hour = timeInZone.getUTCHours();\n      const minute = timeInZone.getUTCMinutes();\n      const second = timeInZone.getUTCSeconds();\n      const city = timeZones[i].city;\n      const newClock: ClockData = { id: i + 2, hour, minute, second, city };\n      clocks.push(newClock);\n    }\n  }\n}\n\n// function setOtherClocksData(this: any) {\n\n//   let arrSize = data.timeZones.length;\n//   let updatedClocks: ClockData[];\n  // this.clocks =\n// }\n// setClocksData() {\n  // let arrSize = data.timeZones.length;\n  // let updatedClocks: ClockData[];\n  // updatedClocks[0] = { id: 1, hour: 20, minute: 14, second: 8, city: 'Jerusalem' };\n// }\n\n// export class ClocksContainerComponent {\n//   clocks = [\n//     { id: 1, hour: 20, minute: 14, second: 8, city: 'Jerusalem' },\n//     { id: 2, hour: 16, minute: 7, second: 0, city: 'London' },\n//     { id: 3, hour: 8, minute: 9, second: 0, city: 'Manhattan' },\n//     { id: 4, hour: 6, minute: 5, second: 0, city: 'Tokyo' },\n//   ];\n\n// }\n","<div class=\"clocks-container\">\n  <div *ngFor=\"let clock of clocks\">\n    <app-clock [clock]=\"clock\"></app-clock>\n  </div>\n</div>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}